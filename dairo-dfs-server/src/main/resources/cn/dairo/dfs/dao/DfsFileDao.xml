<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.dairo.dfs.dao.DfsFileDao">

    <!--添加一条数据-->
    <insert id="add">
        insert into dfs_file(id, userId, parentId, name, size, contentType, localId, date, isExtra, property, state)
        values (#{id}, #{userId}, #{parentId}, #{name}, #{size}, #{contentType}, #{localId}, #{date}, #{isExtra},
                #{property}, #{state})
    </insert>

    <!--通过id获取一条数据-->
    <select id="getOne" resultType="DfsFileDto">
        select *
        from dfs_file
        where id = #{0}
    </select>

    <!--通过文件夹ID和文件名获取文件信息-->
    <select id="getByParentIdAndName" resultType="DfsFileDto">
        select *
        from dfs_file
        where userId = #{userId}
          and parentId = #{parentId}
          and name COLLATE NOCASE = #{name}
          and isHistory = 0
          and deleteDate is null
    </select>

    <!--通过上级Id和文件名列表获取文件列表-->
    <select id="getByParentIdAndNames" resultType="DfsFileDto">
        select *
        from dfs_file
        where userId = #{userId}
        and parentId = #{parentId}
        and name COLLATE NOCASE in
        <foreach collection="names" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
        and isHistory = 0
        and deleteDate is null
    </select>

    <!--通过文件夹ID和文件名获取文件Id-->
    <select id="getIdByParentIdAndName" resultType="Long">
        select id
        from dfs_file
        where userId = #{userId}
          and parentId = #{parentId}
          and name COLLATE NOCASE = #{name}
          and isHistory = 0
          and deleteDate is null
    </select>

    <!--通过路径获取文件ID-->
    <select id="getIdByPath" resultType="Long">
        <foreach collection="names">
            select id from dfs_file where userId = #{userId} and parentId = (
        </foreach>
        0
        <foreach collection="names" item="name">
            ) and name COLLATE NOCASE = #{name} and isHistory = 0 and deleteDate is null
        </foreach>
    </select>

    <!--获取子文件数量-->
    <select id="getSubFileCount" resultType="Int">
        select count(*)
        from dfs_file
        where userId = #{userId}
          and parentId = #{parentId}
          and isHistory = 0
          and deleteDate is null
    </select>

    <!--获取子文件id和文件名-->
    <select id="getSubFileIdAndName" resultType="DfsFileDto">
        select id, name, localId
        from dfs_file
        where userId = #{userId}
          and parentId = #{parentId}
          and isHistory = 0
          and deleteDate is null
    </select>

    <!--获取子文件信息,客户端显示用-->
    <select id="getSubFile" resultType="DfsFileDto">
        select id, name, size, date, localId
        from dfs_file
        where userId = #{userId}
          and parentId = #{parentId}
          and isHistory = 0
          and deleteDate is null
    </select>

    <!--获取子文件ID(物理删除用)-->
    <select id="getSubIdListToLogicDelete" resultType="Long">
        select id
        from dfs_file
        where userId = #{userId}
          and parentId = #{parentId}
    </select>

    <!-- 获取全部已经删除的文件 -->
    <select id="getDeleteList" resultType="DfsFileDto">
        select id, name, size, localId, deleteDate
        from dfs_file
        where userId = #{0}
          and isHistory = 0
          and deleteDate is not null
    </select>

    <!-- 获取所有回收站超时的数据 -->
    <select id="getIdsByDeleteAndTimeout" resultType="Long">
        select id
        from dfs_file
        where deleteDate <![CDATA[<]]> #{0}
        limit 1000
    </select>

    <!-- 获取文件历史版本 -->
    <select id="getHistory" resultType="DfsFileDto">
        select id, size, date
        from dfs_file
        where userId = #{userId}
          and parentId = (select parentId from dfs_file where id = #{id})
          and name = (select name from dfs_file where id = #{id})
          and isHistory = 1
          and deleteDate is null
    </select>

    <!-- 获取尚未处理的数据 -->
    <select id="selectNoHandle" resultType="DfsFileDto">
        select *
        from dfs_file
        where localId > 0
          and state = 0
        order by id asc
        limit 1000
    </select>

    <!--将文件标记为历史版本-->
    <update id="setHistory">
        update dfs_file
        set isHistory = 1
        where id = #{0}
    </update>

    <!--将文件标记为删除-->
    <update id="setDelete">
        update dfs_file
        set deleteDate = #{param2}
        where userId = (select userId from dfs_file where id = #{param1})
          and parentId = (select parentId from dfs_file where id = #{param1})
          and name = (select name from dfs_file where id = #{param1})
          and deleteDate is null
    </update>

    <!--将标记为删除文件还原-->
    <update id="setNotDelete">
        update dfs_file
        set deleteDate = null
        where userId = (select userId from dfs_file where id = #{0})
          and parentId = (select parentId from dfs_file where id = #{0})
          and name = (select name from dfs_file where id = #{0})
          and deleteDate = (select deleteDate from dfs_file where id = #{0})
    </update>

    <!--修改文件类型-->
    <update id="setContentType">
        update dfs_file
        set contentType = #{contentType}
        where id = #{id}
          and localId > 0
    </update>

    <!--彻底删除文件(适用于删除文件夹下所有的文件)-->
    <delete id="deleteByFolder">
        delete
        from dfs_file
        where id = #{0}
    </delete>

    <!-- 删除文件及文件所有历史版本(适用于删除单的文件) -->
    <!--<delete id="deleteByFile">
        delete
        from dfs_file
        where userId = (select userId from dfs_file where id = #{0})
          and parentId = (select parentId from dfs_file where id = #{0})
          and name = (select name from dfs_file where id = #{0})
          and localId > 0
          and deleteDate is not null
          and deleteDate = (select deleteDate from dfs_file where id = #{0})
    </delete>-->

    <!-- 删除文件 -->
    <delete id="deleteByFile">
        delete
        from dfs_file
        where id = #{0}
    </delete>

    <!--文件移动-->
    <update id="move">
        update dfs_file
        set parentId = #{parentId},
            name     = #{name}
        where id = #{id}
    </update>

    <!--设置文件属性-->
    <update id="setProperty">
        update dfs_file
        set property = #{property}
        where id = #{id}
    </update>

    <!--设置文件处理状态-->
    <update id="setState">
        update dfs_file
        set state    = #{state},
            stateMsg = #{stateMsg}
        where id = #{id}
    </update>

    <!--验证文件存储ID权限-->
    <select id="validLocalId" resultType="Boolean">
        select count(*) > 0
        from dfs_file
        where userId = #{param1}
          and localId = #{param2}
    </select>

    <!--获取扩展文件-->
    <select id="selectExtra" resultType="DfsFileDto">
        select *
        from dfs_file
        where parentId = #{parentId}
          and name = #{name}
          and isExtra = 1
    </select>

    <!--获取扩展文件的所有key值-->
    <select id="selectExtraNames" resultType="String">
        select name
        from dfs_file
        where parentId = #{0}
          and isExtra = 1
    </select>

    <!--通过本地存储ID查询文件属性-->
    <select id="selectPropertyByLocalId" resultType="String">
        select property
        from dfs_file
        where localId = #{0}
          and state = 1
          and property is not null
        limit 1
    </select>

    <!--通过本地存储ID查询文件附属文件-->
    <select id="selectExtraFileByLocalId" resultType="DfsFileDto">
        select *
        from dfs_file
        where parentId = (select id from dfs_file where localId = #{0} and state = 1 limit 1)
          and isExtra = 1
    </select>

    <!--获取某个文件附属文件-->
    <select id="selectExtraListById" resultType="DfsFileDto">
        select *
        from dfs_file
        where parentId = #{0}
          and isExtra = 1
    </select>

    <!--获取某个文件夹下的所有文件及文件夹，包括历史文件，已删除文件-->
    <select id="selectAllChildList" resultType="DfsFileDto">
        select *
        from dfs_file
        where parentId = #{0}
    </select>

    <!--文件是否正在使用中-->
    <select id="isFileUsing" resultType="Boolean">
        select count(*)
        from dfs_file
        where localId = #{0}
    </select>
</mapper>